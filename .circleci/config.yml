version: 2.1
commands:
  destroy_environment:
    steps:
      - run:
          name: Delete stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
  # create_infrastructure: 
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       - checkout
  #       - run:
  #           name: Create Cloudformation Stack
  #           command: |
  #             aws cloudformation deploy \
  #               --template-file cftemplate.yaml \
  #               --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #               --region us-west-2
  #       - destroy_environment

  # configure_infrastructure: 
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #             # You can get this ID in the section where you registered the SSH Key
  #             fingerprints: ["ac:2b:8b:9b:de:ce:77:e1:0a:9e:93:06:0b:d6:ff:f6"] 
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           # Install Ansible
  #           apk add --update ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           ansible-playbook -i inventory.txt main-ec2.yaml

  # smoke_test:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke testing
  #         command: |
  #           URL="https://notexistingwebsite.com/"
  #           if curl -s --head ${URL}
  #           then
  #             return 0 #so the task will succeed
  #           else
  #             return 1 #so the task will fail
  #           fi
  #     - destroy_environment

  create_and_deploy_frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Create Bucket for the new version
          command: |
            aws cloudformation deploy \
            --template-file bucket.yaml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="my${CIRCLE_WORKFLOW_ID:0:7}bucket" \
            --tags project=udacity
      - run: aws s3 sync . s3://my${CIRCLE_WORKFLOW_ID:0:7}bucket --delete   
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yaml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yaml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="my${CIRCLE_WORKFLOW_ID:0:7}bucket"
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

workflows:
  my_workflow:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure
      # - smoke_test:
      #     requires:
      #       - "create_infrastructure"
      - create_and_deploy_frontend
      - promote_to_production:
          requires:
            - "create_and_deploy_frontend"
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - "get_last_deployment_id"
            - "promote_to_production"
